"""Reporting page with PDF/PPTX generation."""

import streamlit as st
from pathlib import Path
from datetime import datetime
from app.ui.components.library import ComponentLibrary
from app.ui.state.manager import StateManager
from app.ui.export.manager import ExportManager


def render():
    """Render the Reporting page."""
    ComponentLibrary.section_header("üßæ Professional Reporting")
    
    df = StateManager.get_dataset()
    
    st.markdown("### üìÑ Report Configuration")
    
    col1, col2 = st.columns(2)
    with col1:
        report_title = st.text_input("Report Title", "Wastewater Analytics Report")
        report_subtitle = st.text_input("Subtitle", "Generated by Aqua Analytics Platform")
        author = st.text_input("Author", "Analytics Team")
    
    with col2:
        output_format = st.selectbox("Output Format", ["PDF", "PPTX", "HTML"])
        include_charts = st.checkbox("Include Charts", True)
        include_raw_data = st.checkbox("Include Raw Data Tables", False)
    
    # Report sections
    st.markdown("### üìã Report Sections")
    
    sections = {
        'Executive Summary': st.checkbox("Executive Summary", True),
        'KPIs': st.checkbox("Key Performance Indicators", True),
        'Forecasting Analysis': st.checkbox("Forecasting Analysis", StateManager.get_all_models() != {}),
        'Anomaly Detection': st.checkbox("Anomaly Detection Results", 'anomaly_results' in st.session_state),
        'Benchmarking': st.checkbox("Benchmarking Analysis", 'benchmark_results' in st.session_state),
        'Explainability': st.checkbox("Model Explainability", StateManager.get_all_models() != {}),
    }
    
    # Generate report
    if st.button("üìä Generate Report", type="primary", use_container_width=True):
        if df is None:
            st.error("Please load a dataset first.")
            return
        
        with st.spinner(f"Generating {output_format} report..."):
            try:
                exporter = ExportManager()
                
                metadata = {
                    'title': report_title,
                    'subtitle': report_subtitle,
                    'author': author,
                    'date': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    'sections': [k for k, v in sections.items() if v],
                    'include_charts': include_charts,
                    'include_raw_data': include_raw_data,
                }
                
                if output_format == "PDF":
                    report_path = exporter.generate_pdf_report(df, metadata)
                elif output_format == "PPTX":
                    report_path = exporter.generate_pptx_report(df, metadata)
                else:
                    report_path = exporter.generate_html_report(df, metadata)
                
                st.success(f"‚úÖ Report generated successfully!")
                st.info(f"üìÅ Report saved to: `{report_path}`")
                
                # Download button
                with open(report_path, 'rb') as f:
                    file_ext = output_format.lower()
                    st.download_button(
                        label=f"üì• Download {output_format} Report",
                        data=f.read(),
                        file_name=f"wastewater_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.{file_ext}",
                        mime=f"application/{file_ext}" if file_ext != "html" else "text/html",
                    )
                
            except Exception as e:
                st.error(f"Report generation failed: {str(e)}")
                st.exception(e)
    
    # Report templates
    st.markdown("### üìë Report Templates")
    st.info("Customize report templates in `docs/templates/` directory.")
    
    # Scheduled reports (stub)
    st.markdown("### ‚è∞ Scheduled Reports")
    st.info("Schedule reports to run automatically (feature coming soon).")



